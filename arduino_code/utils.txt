# File contains functions that I donot use not more




// CALCUATE AVG. FROM FIRST 10 SAMPLES AND SUBTRACT IT FROM CURRENT SENSOR VALUE (STATIC AVG. SUB)
//  int num_samples_avg = 10;
//
//  for (int i = 0; i < num_devices_; i++) {
//    for (int j = 0; j < NFINGERS; j++) {
//      for (int k = 0; k < num_samples_avg; k++) {
//        unsigned long long int prox = readProximity(i2c_ids_[i],sensor_ports[j]);
//        prox_value_arr[i][j] = prox_value_arr[i][j] + prox;
////        Serial.println((long) prox_value_arr[i][j]);
//      }
//    }
//  }
//
//
//  for (int i = 0; i < num_devices_; i++) {
//    for (int j = 0; j < NFINGERS; j++) {
//      for (int k = 0; k < num_samples_avg; k++) {
//        unsigned long long int prss = readPressure(i2c_ids_[i], sensor_ports[j], j);
//        prss_value_arr[i][j] = prss_value_arr[i][j] + prss;
////        Serial.println((long) prss_value_arr[i][j]);
//      }
//    }
//  }
//
//  Serial.print("Averaged Proximity value of sensor at mux 0 port 0: ");
//  unsigned long long int avg_prox = prox_value_arr[0][0] / 10.0;
//  Serial.println((long) avg_prox);
//
//  Serial.print("Averaged Pressure value of sensor at mux 0 port 0: ");
//  unsigned long long int avg_prss = prss_value_arr[0][0] / 10.0;
//  Serial.println((long) avg_prss);
//
////  Serial.println("DONE reading values to set baseline");
////  Serial.print(proximity_value[0][0]);
//
//  starttime = micros();
//
//  while(1){
//    unsigned long long int prox = readProximity(i2c_ids_[0],sensor_ports[0]);
//    Serial.print((long) (prox - avg_prox));
//    Serial.print('\t');
//    unsigned long long int prss = readPressure(i2c_ids_[0], sensor_ports[0], 0);
//    Serial.println((long) (prss - avg_prss));
//    }





// HIGH-PASS FILTER
// https://www.norwegiancreations.com/2016/03/arduino-tutorial-simple-high-pass-band-pass-and-band-stop-filtering/

// global variables
unsigned long long int EMA_a = 0.1;
unsigned long long int EMA_S = 0;
unsigned long long int prox_highpass = 0;

// In setup()
EMA_S = readPressure(i2c_ids_[0], sensor_ports[0], 0);

// In loop()
//  unsigned long long int prox = readPressure(i2c_ids_[0], sensor_ports[0], 0);
//  EMA_S = (EMA_a*prox) + ((1-EMA_a)*EMA_S);  //run the EMA
//  prox_highpass = prox - EMA_S;                   //calculate the high-pass signal
//  Serial.println((long) prox_highpass);



/****** Standarizing, zero mean one std. *********/

// create a one pole (RC) lowpass filter
FilterOnePole highpassFilter(HIGHPASS, 3.0);
FilterOnePole lowpassFilter(LOWPASS, 0.05);
RunningStatistics inputStats;

// In setup
//  inputStats.setWindowSecs(1);

// In loop
// https://www.element61.be/en/resource/standardization-case-real-time-predictions
//    float p = readPressure(i2c_ids_[0], sensor_ports[0], 0);
//    inputStats.input(p);
//    float st_p = (p - inputStats.mean())/inputStats.sigma();
//    float lowpass_p = lowpassFilter.input(st_p);
//    Serial.println(lowpass_p);

//    float ir = readProximity(i2c_ids_[0],sensor_ports[0]);
//    float st_ir = 0;
//    inputStats.input(ir);
//    float sd = inputStats.sigma();
//    if (sd == 0.0){
//      st_ir = 0.0;}
//    else{
//      st_ir = (ir - inputStats.mean())/sd;}
//    float lowpass_ir = lowpassFilter.input(st_ir);
//    Serial.println(st_ir);





//******* Separate PWM calculation for open and close. Comment the pwm line above if using this *******//
//    if (prox_err[i] > 0.0) {
//      pwm[i] = prox_err[i]*kp_close[i] + diff_prox_err[i]*kd_close[i] + sum_prox_err[i]*ki_close[i];
//      Serial.print(int(pwm[i])); Serial.print('\t');
//      byte close_finger[4] = {addrs[i], 0x0C, 0x80, int(pwm[i])};
//      send_cmmnd(close_finger);
//    }
//
//    if (prox_err[i] < 0.0){
//      pwm[i] = prox_err[i]*kp_open[i] + diff_prox_err[i]*kd_open[i] + sum_prox_err[i]*ki_open[i];
//      Serial.print(abs(int(pwm[i]))); Serial.print('\t');
//      byte open_finger[4] = {addrs[i], 0x0C, 0xC0, abs(int(pwm[i]))};
//      send_cmmnd(open_finger);
//      }
//
//    if (-0.01 <= prox_err[i] <= 0.01){
//      sum_prox_err[i] = 0;
//      }

